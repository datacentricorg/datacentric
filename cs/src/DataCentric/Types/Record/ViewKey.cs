/*
Copyright (C) 2013-present The DataCentric Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System;
using MongoDB.Bson.Serialization.Attributes;
using NodaTime;

namespace DataCentric
{
    /// <summary>
    /// Stores data for a view of the record that is shown alongside
    /// the record in the user interface.
    ///
    /// When the record is displayed, the user interface backend
    /// will run a query for RecordId field and will display each
    /// record returned by the query on a separate tab or panel
    /// along with the record itself.
    ///
    /// While some of the views for a record may be generated by a
    /// method of the record class identified by the Viewer attribute,
    /// this is not a requirement. View data may also be generated
    /// as a side effect of a handler method, by the record's Init
    /// method, or even by a method of an unrelated data type.
    /// </summary>
    [BsonSerializer(typeof(BsonKeySerializer<ViewKey>))]
    public sealed class ViewKey : TypedKey<ViewKey, ViewData>
    {
        /// <summary>
        /// TemporalId of the record for which the view is created.
        ///
        /// This key is specific to the record version. When a new
        /// record is created for the same key, view records created
        /// for its previous version will no longer be visible except
        /// when Id of the record remains the same in a non-temporal
        /// data source or dataset.
        /// </summary>
        public TemporalId RecordId { get; set; }

        /// <summary>
        /// Name of the view displayed in the user interface, usually
        /// on the tab where view is displayed.
        ///
        /// For views generated by method marked by the Viewer attribute,
        /// if the attribute definition does not provide the name of the
        /// view, it will be the same as the name of the viewer method.
        /// </summary>
        public string ViewName { get; set; }
    }
}
