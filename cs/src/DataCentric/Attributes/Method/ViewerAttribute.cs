/*
Copyright (C) 2013-present The DataCentric Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System;

namespace DataCentric
{
    /// <summary>
    /// Attribute for identifying viewer methods.
    ///
    /// Viewers are methods that create ViewData records that
    /// are displayed along with the record in the user interface,
    /// e.g. on a tab of the screen associated with the Record.
    ///
    /// Note that not all ViewData records are created by viewer
    /// methods. Some may be created as side effect of a handler,
    /// by the record's Init method, or even by an unrelated data
    /// type.
    ///
    /// A viewer method must not take any parameters and have
    /// no return value.
    ///
    /// ViewData record created by the viewer must have ViewName
    /// that matches the value specified in the attribute constructor,
    /// or if not specified, the name of the viewer method.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method)]
    public class ViewerAttribute : Attribute
    {
        /// <summary>
        /// Name of the view displayed in the user interface, usually
        /// on the tab where view is displayed.
        ///
        /// For views generated by method marked by the Viewer attribute,
        /// if the attribute definition does not provide the name of the
        /// view, it will be the same as the name of the viewer method.
        /// </summary>
        public string ViewName { get; }

        //--- CONSTRUCTORS

        /// <summary>
        /// Create ViewData with ViewName that is the same as the name of
        /// the viewer method to which this attribute is applied. 
        ///
        /// Name of the view displayed in the user interface, usually
        /// on the tab where view is displayed.
        /// </summary>
        public ViewerAttribute()
        {
            // ViewName property will rename null 
        }

        /// <summary>
        /// Create ViewData with the specified view name.
        /// 
        /// Name of the view displayed in the user interface, usually
        /// on the tab where view is displayed.
        /// </summary>
        public ViewerAttribute(string viewName)
        {
            ViewName = viewName;
        }
    }
}
